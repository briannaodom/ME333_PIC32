#include "NU32.h" 
#define NUMSAMPS 1000         // constants, functions for startup and UART
static volatile int Waveform[NUMSAMPS];

int main(void) {
  NU32_Startup();          // cache on, interrupts on, LED/button init, UART init

  T3CONbits.TCKPS = 0;     // Timer3 prescaler N=1 (1:1)
  PR3 = 3999;              // period = (PR2+1) * N * ns = .05 ms, 20 kHz
  TMR3 = 0;                // initial TMR3 count is 0
  OC1CONbits.OCM = 0b110;
  OC1CONbits.OCTSEL = 1;   // PWM mode without fault pin; other OC1CON bits are defaults
  //OC1RS = 3000;             // duty cycle = OC1RS/(PR2+1) = 25%
  OC1R = 3000;              // initialize before turning OC1 on; afterward it is read-only
  T3CONbits.ON = 1;        // turn on Timer3
  OC1CONbits.ON = 1;       // turn on OC1
  T2CONbits.ON = 2;       //timer2 prescaler N=4 (1:4)
  PR2 = 19999;            //period  
  TMR2= 0;
  T2CONbits.ON = 1;
  makeWaveform();

  __builtin_disable_interrupt();
  IPC2bits.T2IP = 5;
  IPC2bits.T2IS = 1;
  IFS0bits.T2IF = 0;
  IEC0bits.T2IE = 1;
  __builtin_enable_interrupt();
  _CP0_SET_COUNT(0);

  while(_CP0_GET_COUNT() < 4 * 40000000){
    ;
  }
  //OC1RS = ; 
  while(1){
    ;
  }
  return 0;
}

void makeWaveform(){
  int i = 0, center =  , A =    ;
  for(i=0; i < NUMSAMPS; i++){
    if(i<NUMSAMPS/2){
      Waveform[i] = center + A;
    }
    else {
      Waveform[i] = center - A;
    }
  } 
}

void __ ISR(_TIMER_2_VECTOR, IPL5SOFT) Controller(void) {
  static int counter = 0;

  counter ++;
  if(counter == NUMSAMPS) {
    counter = 0;
  }
  IFS0bits.T2IF = 0;
}

